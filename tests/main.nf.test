nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("WES_test") {

        when {
            params {
                // define parameters here. Example: 
                publish_dir = "${outputDir}/results"
                timestamp = "test"
                skip_ado = true
                architecture = "x86"
                input_csv = "$baseDir/tests/data/inputs/input.csv"
            }
        }

        then {
            assertAll(
                // Check if the workflow was successful
                { assert workflow.success },

                // Verify existence of the multiqc report HTML file
                { assert new File("${outputDir}/results_test/multiqc/multiqc_report.html").exists()},

                // Check for a match in the all metrics MQC text file
                {assert snapshot (path("${outputDir}/results_test/secondary_analyses/metrics/nf-wes-pipeline_all_metrics_mqc.txt")).match("all_metrics_mqc")},

                // Check for a match in the selected metrics MQC text file
                {assert snapshot (path("${outputDir}/results_test/secondary_analyses/metrics/nf-wes-pipeline_selected_metrics_mqc.txt")).match("selected_metrics_mqc")},

                // Check for a match in the dedup_sentieonmetrics text file
                //{assert snapshot (path("${outputDir}/results_test/secondary_analyses/alignment/chr22_testsample1.dedup_sentieonmetrics.txt")).match("sentieonmetrics")},

                // Verify existence of the dnascope vcf file
                {assert new File("${outputDir}/results_test/secondary_analyses/variant_calls_dnascope/chr22_testsample1_dnascope.vcf.gz").exists()},

                // Verify existence of the snpEff vcf file
                {assert new File("${outputDir}/results_test/tertiary_analyses/variant_annotation/snpeff/chr22_testsample1_snpEff.ann.vcf").exists()},

                // Verify existence of the snpEff_version yml file
                {assert new File("${outputDir}/results_test/tertiary_analyses/variant_annotation/snpeff/snpEff_version.yml").exists()}

            )
        }

    }

}
